#!/usr/bin/perl -w
# vim:ts=2 sw=2 sts=2 et:

use Term::ANSIColor qw( :constants :constants256 );

main();

my $untracked = 0;

sub main {
  my @lines = qx(git status);

  foreach my $line (@lines) {
    chomp $line;
    print processLine($line);
    print "\n";
  }
}

sub processLine {
  my ($line) = @_;

  if ($line =~ s/^\t(modified:\s+(?:package\.json|yarn\.lock|.*build\.gradle|settings\.gradle|Vagrantfile))/    ‚ö†Ô∏è   $1/) {
      return RED . $line . RESET;
  }

  if ($line =~ /^On branch (.+$)/) {
    return 'On branch ' . MAGENTA . $1 . RESET . "\n";
  }

  if ($line =~ m/Your branch is ahead of '([^']+)' by (\d+) commit/) {
    my $upstream = $1;
    my $commits = $2;
    my $modified = $line;
    $modified =~ s/of '$upstream' by/"of '" . RED . $upstream . RESET . "' by"/e;
    $modified =~ s/by $commits/"by " . GREEN . $commits . RESET/e;
    return $modified;
  }

  if ($line =~ s/^\tboth modified:/    üî•  both modified:/) {
    my $modified = RED . $line . RESET;
    $modified =~ s/(\w+\.stories\.js)/MAGENTA . $1 . RESET/e;
    return $modified;
  }

  if ($line =~ s/^\tdeleted:/    ‚ùå  deleted:/) {
    my $modified = RED . $line . RESET;
    $modified =~ s/(\w+\.stories\.js)/MAGENTA . $1 . RESET/e;
    return $modified;
  }

  if ($line =~ s/^\tnew file:/    ‚úÖ  new file:/) {
    my $modified = GREEN . $line . RESET;
    $modified =~ s/(__(?:tests|snapshots)__.*)/CYAN . $1 . RESET/e;
    $modified =~ s/((?:\w+Tests|TestCase|Test)\.java)/CYAN . $1 . RESET/e;
    $modified =~ s/(\w+\.stories\.js)/MAGENTA . $1 . RESET/e;
    return $modified;
  }

  if ($line =~ m/^\tmodified:/) {
    my $modified = YELLOW . $line . RESET;
    $modified =~ s/(__(?:tests|snapshots)__.*)/GREEN . $1 . RESET/e;
    $modified =~ s/(\w+\.stories\.js)/MAGENTA . $1 . RESET/e;
    return $modified;
  }

  if ($line =~ m/Changes to be committed/) {
      return GREEN . $line . RESET;
  }

  if ($line =~ m/Changes not staged for commit/) {
      return YELLOW . $line . RESET;
  }

  if ($line =~ m/^\trenamed:/) {
    my $modified = CYAN . $line . RESET;
    $modified =~ s/(__(?:tests|snapshots)__.*?\b)/GREEN . $1 . CYAN/ge;
    $modified =~ s/(\w+\.stories\.js)/MAGENTA . $1 . CYAN/ge;
    return $modified;
  }

  if ($line =~ s/^\tcopied:/    üåà  copied:/) {
    my $modified = CYAN . $line . RESET;
    $modified =~ s/(__(?:tests|snapshots)__.*?\b)/GREEN . $1 . CYAN/ge;
    $modified =~ s/(\w+\.stories\.js)/MAGENTA . $1 . CYAN/ge;
    return $modified;
  }

  if ($line =~ m/^Untracked files:$/) {
    $untracked = 1;
    return RED . $line . RESET;
  }

  if ($untracked) {
    if ($line =~ s/^\t(\w+\/.*)\b/'    ‚ú®  ' . RED . $1 . RESET/e) {
      return $line;
    }
  }

  return $line;
}

